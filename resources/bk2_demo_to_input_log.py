#!/usr/bin/env python
import io
import os
import sys

if len(sys.argv) != 3:
   print("bk2_demo_to_input_log.py <asm_file> <output_log_file>")
   sys.exit()
else:
   asm_name = sys.argv[1]
   output_name = sys.argv[2]

asm_file = io.open(os.path.join(os.path.dirname(os.path.realpath(__file__)), asm_name), "r")
asm_lines = asm_file.readlines()
asm_file.close()

output_file = io.open(os.path.join(os.path.dirname(os.path.realpath(__file__)), output_name), "w", newline='\n')
output_file.write("\n; ---------------")
output_file.write("\n; Log Export")
output_file.write("\n; (autogenerated)")
output_file.write("\n; ---------------\n\n")

demo_input_started = False
for line in asm_lines:
   if line.startswith("DemoInputInstructionLists"):
      demo_input_started = True
   if demo_input_started:
      if len(line) < 20 or not line.startswith("    dw $"):
         output_file.write(line)
      else:
         count = int(line[8:12], 16)
         keys = int(line[15:19], 16)
         output_line = bytearray("|..|............|\n", "ascii")
         if keys >= 0x8000:
            keys -= 0x8000
            output_line[11] = ord('B')
         if keys >= 0x4000:
            keys -= 0x4000
            output_line[10] = ord('Y')
         if keys >= 0x2000:
            keys -= 0x2000
            output_line[8] = ord('s')
         if keys >= 0x1000:
            keys -= 0x1000
            output_line[9] = ord('S')
         if keys >= 0x800:
            keys -= 0x800
            output_line[4] = ord('U')
         if keys >= 0x400:
            keys -= 0x400
            output_line[5] = ord('D')
         if keys >= 0x200:
            keys -= 0x200
            output_line[6] = ord('L')
         if keys >= 0x100:
            keys -= 0x100
            output_line[7] = ord('R')
         if keys >= 0x80:
            keys -= 0x80
            output_line[13] = ord('A')
         if keys >= 0x40:
            keys -= 0x40
            output_line[12] = ord('X')
         if keys >= 0x20:
            keys -= 0x20
            output_line[14] = ord('l')
         if keys >= 0x10:
            keys -= 0x10
            output_line[15] = ord('r')
         finished_line = output_line.decode()
         while count > 0:
            output_file.write(finished_line)
            count -= 1

output_file.close()

